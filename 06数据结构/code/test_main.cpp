#include <stdio.h>
#include <iostream>
#include "XVector/XVector.cpp"
//#include "XList/XList.h"
//#include "XList/XList.cc"
//#include "Xtree/XBinTree.h"
//#include "Xtree/XAVLTree.h"
//#include "Xtree/XHeap.h"
#include "sort/insertionSort.h"
#include "sort/mergeSort.h"
#include "sort/quickSort.h"
#include "sort/heapSort.h"
#include "sort/countingSort.h"

//插入排序        ✅
//归并排序        ✅
//快速排序（随机）  ✅
//堆排序          ✅
//计数排序        ✅
//基数排序
//桶排序
using namespace std;

int main(){
    cout  << "hello main ~~~~~!" << endl;

    /*XList<int> xv;

    xv.printfAll();


    for(int i = 0; i < 20; i++){
        xv.printfAll();
        xv.push_back(i); 
    }

    xv.printfAll();
        BinNode<string>* root = new BinNode<string>("A");

        BinNode<string>* nodeB = new BinNode<string>("B");
        BinNode<string>* nodeC = new BinNode<string>("C");
        BinNode<string>* nodeD = new BinNode<string>("D");
        BinNode<string>* nodeE = new BinNode<string>("E");
        BinNode<string>* nodeF = new BinNode<string>("F");
        root->left = nodeB;
        root->right = nodeC;
        nodeB->left = nodeD;
        nodeB->right = nodeE;
        nodeC->left = nodeF;
        */
        /*cout  << "--------root---------" << root<< endl;
        cout  << "--------nodeB--------" << nodeB<< endl;
        cout  << "--------nodeC--------" << nodeC<< endl;
        cout  << "--------nodeD--------" << nodeD<< endl;
        cout  << "--------nodeE--------" << nodeE<< endl;
        cout  << "--------nodeF--------" << nodeF<< endl;

        std::cout  << "start oper ~~~~~!" << std::endl;

        int height = hight(root);
        std::cout  << "height: " << height << std::endl;

        int size = msize(root);
        std::cout  << "size: " << size << std::endl;

        //std::cout  << "--------preOrder--------" << std::endl;
        //preOrder(root);

        //std::cout  << "--------midOrder--------" << std::endl;
        //midOrder(root);
        //std::cout  << "--------midOrderEx--------" << std::endl;
        //midOrderEx(root);

        //std::cout  << "--------postOrder-------" << std::endl;
        //postOrder(root);

        
        std::cout  << "--------leveOrder--------" << std::endl;
        leveOrder(root);
*/
    
    /*MaxHeap mh = Create(30);


    insert(mh, 58);
    insert(mh, 25);
    insert(mh, 44);
    insert(mh, 18);
    insert(mh, 10);
    insert(mh, 31);
    insert(mh, 110);
    insert(mh, 24);
    insert(mh, 48);
    insert(mh, 55);
    insert(mh, 53);
    insert(mh, 59);
    insert(mh, 66);
    insert(mh, 77);
    insert(mh, 88);
    showMaxHead(mh);
    deleteMax(mh);
    showMaxHead(mh);*/


    vector<int> numsss1{0,1,2
    ,3,4,5,5,6,6,7,8,8,11,12,13,
    15,16,21,23,31,32,32,32,32,32,32,35,35,35,35,35,35,38,41,41,41,41
    ,41,43,43,43,43,43,43,43,43,44,45,45,45,45,45,45,46,46,46,46,46,46,
    46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,48,48,
    48,48,49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
    51,51,51,51,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
    54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,56,56,56,56,56,56
    ,56,56,58,61,61,61,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65
    ,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65
    ,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65
    ,65,65,65,65,65,65,65,65,66,67,67,68,68,68,68,68,68,68,68,68,68
    ,68,68,68,68,68,68,68,68,68,68,68,68,71,74,76,78,84,84,84,84,84
    ,84,85,85,85,85,85,86,86,86,86,87,87,87,94,96,96,96,98,98,98,98
    ,115,121,132,132,132,135,146,154,154,156,156,156,164,165,165
    ,165,165,165,165,165,165,165,165,165,168,168,312,312,321,321,321
    ,321,321,325,351,351,353,354,354,354,354,364,365,365,413,415,431
    ,435,435,436,451,452,454,456,456,456,456,456,456,461,465,465,465
    ,465,465,465,465,465,465,465,465,465,465,468,468,468,468,468,468
    ,468,468,478,486,498,498,516,521,521,531,541,547,561,564,564,584
    ,584,631,641,645,646,647,651,651,651,651,651,651,651,651,651,651
    ,651,651,651,651,651,652,654,654,654,654,654,654,654,654,654,654
    ,654,654,654,654,654,654,654,654,654,654,654,654,654,654,674,684
    ,684,684,684,684,684,684,685,685,685,685,744,849,854,894,987,987,
    1321,1651,3215,3414,3521,4164,4165,4354,4556,4561,4645,4651,4651,
    4654,4684,4684,5216,5631,5646,6351,6521,6546,6841,6854,6854,6874,6874,
    7468,8564,9687,11854,16854,46546,51351,51654,165465,516556,646579,654654,
    4161565,4546351,4813512,6416461,62165165,165465465,465151651,486135165,
    516481165,654615165,1654694136,1685845651};

    vector<int> numsss2{0,1,2
    ,3,4,5,5,6,6,7,8,8,11,12,13,
    15,16,21,23,31,32,32,32,32,32,32,35,35,35,35,35,35,38,41,41,41,41
    ,41,43,43,43,43,43,43,43,43,44,45,45,45,45,45,45,46,46,46,46,46,46,
    46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,48,48,
    48,48,49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,
    51,51,51,51,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
    54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,56,56,56,56,56,56
    ,56,56,58,61,61,61,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65
    ,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65
    ,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65
    ,65,65,65,65,65,65,65,65,66,67,67,68,68,68,68,68,68,68,68,68,68
    ,68,68,68,68,68,68,68,68,68,68,68,68,71,74,76,78,84,84,84,84,84
    ,84,85,85,85,85,85,86,86,86,86,87,87,87,94,96,96,96,98,98,98,98
    ,115,121,132,132,132,135,146,154,154,156,156,156,164,165,165
    ,165,165,165,165,165,165,165,165,165,168,168,312,312,321,321,321
    ,321,321,325,351,351,353,354,354,354,354,364,365,365,413,415,431
    ,435,435,436,451,452,454,456,456,456,456,456,456,461,465,465,465
    ,465,465,465,465,465,465,465,465,465,465,468,468,468,468,468,468
    ,468,468,478,486,498,498,516,521,521,531,541,547,561,564,564,584
    ,584,631,641,645,646,647,651,651,651,651,651,651,651,651,651,651
    ,651,651,651,651,651,652,654,654,654,654,654,654,654,654,654,654
    ,654,654,654,654,654,654,654,654,654,654,654,654,654,654,674,684
    ,684,684,684,684,684,684,685,685,685,685,744,849,854,894,987,987,
    1321,1651,3215,3414,3521,4164,4165,4354,4556,4561,4645,4651,4651,
    4654,4684,4684,5216,5631,5646,6351,6521,6546,6841,6854,6854,6874,6874,
    7468,8564,9687,11854,16854,46546,51351,51654,165465,516556,646579,654654,
    4161565,4546351,4813512,6416461,62165165,165465465,465151651,486135165,
    516481165,654615165,1654694136,1685845651};
    
    cout << endl; 
    cout << endl; 
    cout << endl; 
    cout << endl; 
    cout << endl; 
	vector<int> nums1{ 45,13,45,15,34,14,87,35,1 };
	vector<int> nums2{ 45,13,45,15,34,14,87,35,1 };
	vector<int> nums3{ 45,13,45,15,34,14,87,35,1 };
	vector<int> nums4{ 45,13,45,15,34,14,87,35,1 };
	vector<int> nums5{ 45,13,45,15,34,14,87,35,1 };
    cout << "qian :["; 
    for(auto item:nums1)
        cout<<","<<item;
        
    cout << endl; 

    mergeSort(nums1);
    instertionSort(nums2);
    quickSort(nums3);
    heapSort(nums4);
    auto csort = countingSort(nums5, 87);


    cout << "mergeSort :[";
    for(auto item:nums1)
        cout<<","<<item;
    cout <<"]"<<endl;

    cout << "instertionSort :[";
    for(auto item:nums2)
        cout<<","<<item;
    cout <<"]"<<endl;

    cout << "quickSort :[";
    for(auto item:nums3)
        cout<<","<<item;
    cout <<"]"<<endl;


    cout << "heapSort :[";
    for(auto item:nums4)
        cout<<","<<item;
    cout <<"]"<<endl;


    cout << "countingSort :[";
    for(auto item:csort)
        cout<<","<<item;
    cout <<"]"<<endl;



    
    cout << "bye main ~~~~~!" << endl;

    /*int x;
    while (getchar()!=48)
    {
        scanf("%d",&x);
        printf("%d",x);
    }*/
    
    return 0;
}